// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sum.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Calculator {
  public static partial class CalculatorService
  {
    static readonly string __ServiceName = "calculator.CalculatorService";

    static readonly grpc::Marshaller<global::Calculator.CalRequest> __Marshaller_calculator_CalRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Calculator.CalRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Calculator.CalResponse> __Marshaller_calculator_CalResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Calculator.CalResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Calculator.PrimeRequest> __Marshaller_calculator_PrimeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Calculator.PrimeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Calculator.PrimeResponse> __Marshaller_calculator_PrimeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Calculator.PrimeResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Calculator.CalRequest, global::Calculator.CalResponse> __Method_Sum = new grpc::Method<global::Calculator.CalRequest, global::Calculator.CalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Sum",
        __Marshaller_calculator_CalRequest,
        __Marshaller_calculator_CalResponse);

    static readonly grpc::Method<global::Calculator.CalRequest, global::Calculator.CalResponse> __Method_Mul = new grpc::Method<global::Calculator.CalRequest, global::Calculator.CalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Mul",
        __Marshaller_calculator_CalRequest,
        __Marshaller_calculator_CalResponse);

    static readonly grpc::Method<global::Calculator.PrimeRequest, global::Calculator.PrimeResponse> __Method_Prime = new grpc::Method<global::Calculator.PrimeRequest, global::Calculator.PrimeResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Prime",
        __Marshaller_calculator_PrimeRequest,
        __Marshaller_calculator_PrimeResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Calculator.SumReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CalculatorService</summary>
    [grpc::BindServiceMethod(typeof(CalculatorService), "BindService")]
    public abstract partial class CalculatorServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Calculator.CalResponse> Sum(global::Calculator.CalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Calculator.CalResponse> Mul(global::Calculator.CalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Prime(global::Calculator.PrimeRequest request, grpc::IServerStreamWriter<global::Calculator.PrimeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CalculatorService</summary>
    public partial class CalculatorServiceClient : grpc::ClientBase<CalculatorServiceClient>
    {
      /// <summary>Creates a new client for CalculatorService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CalculatorServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CalculatorService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CalculatorServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CalculatorServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CalculatorServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Calculator.CalResponse Sum(global::Calculator.CalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Sum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Calculator.CalResponse Sum(global::Calculator.CalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Sum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Calculator.CalResponse> SumAsync(global::Calculator.CalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Calculator.CalResponse> SumAsync(global::Calculator.CalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Sum, null, options, request);
      }
      public virtual global::Calculator.CalResponse Mul(global::Calculator.CalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Mul(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Calculator.CalResponse Mul(global::Calculator.CalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Mul, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Calculator.CalResponse> MulAsync(global::Calculator.CalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MulAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Calculator.CalResponse> MulAsync(global::Calculator.CalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Mul, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Calculator.PrimeResponse> Prime(global::Calculator.PrimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Prime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Calculator.PrimeResponse> Prime(global::Calculator.PrimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Prime, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CalculatorServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CalculatorServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CalculatorServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Sum, serviceImpl.Sum)
          .AddMethod(__Method_Mul, serviceImpl.Mul)
          .AddMethod(__Method_Prime, serviceImpl.Prime).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CalculatorServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Sum, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calculator.CalRequest, global::Calculator.CalResponse>(serviceImpl.Sum));
      serviceBinder.AddMethod(__Method_Mul, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calculator.CalRequest, global::Calculator.CalResponse>(serviceImpl.Mul));
      serviceBinder.AddMethod(__Method_Prime, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Calculator.PrimeRequest, global::Calculator.PrimeResponse>(serviceImpl.Prime));
    }

  }
}
#endregion
